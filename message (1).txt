local Library = {}

function Library:Init(InitData)
    local IF = {TabCount = 0}

    local UI = game:GetObjects("rbxassetid://11344255402")[1]

    local Interface = UI["UI"]

    if syn then
        syn.protect_gui(Interface)
        Interface.Parent = game:GetService("CoreGui")
    elseif gethui then
        Interface.Parent = gethui()
    else
        Interface.Parent = game:GetService("CoreGui")
    end
    
    local Ids = {
        "rbxthumb://id=6031471479&type=Asset&w=420&h=420",
        "rbxthumb://id=6031471483&type=Asset&w=420&h=420",
    }
    local Temp = {}
    
    for _, Id in ipairs(Ids) do
        local Decal = Instance.new("Decal", workspace)
        Decal.Texture = Id
        Temp[#Temp + 1] = Decal
    end
    
    game:GetService("ContentProvider"):PreloadAsync(Temp)
    
    for _, Decal in ipairs(Temp) do
        Decal:Destroy()
    end

    local MainContainer = Interface["_"]

    local function Drag(Frame, Speed)
        local Dragging;
        local DragStart;
        local FrameStart;
        local DragInput;
        local DragSpeed = Speed
        
        local function Update(Input)
            local Delta = Input.Position - DragStart
            local NewPosition = UDim2.new(FrameStart.X.Scale, FrameStart.X.Offset + Delta.X, FrameStart.Y.Scale, FrameStart.Y.Offset + Delta.Y)
            
            game:GetService("TweenService"):Create(Frame, TweenInfo.new(DragSpeed, Enum.EasingStyle["Quint"], Enum.EasingDirection["Out"]), {Position = NewPosition}):Play()
        end
        
        Frame.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType["MouseButton1"] then
                Dragging = true
                DragStart = Input.Position
                FrameStart = Frame.Position
                
                Input.Changed:Connect(function()
                    if Input.UserInputState == Enum.UserInputState["End"] then
                        Dragging = false
                    end
                end)
            end
        end)
        
        Frame.InputChanged:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType["MouseMovement"] then
                DragInput = Input
            end
        end)
        
        game:GetService("UserInputService").InputChanged:Connect(function(Input)
            if Input == DragInput and Dragging then
                Update(Input)
            end
        end)
    end

    Drag(MainContainer, 0.3)

    local Main = MainContainer["Main"]
    local Keybind = Enum.KeyCode["LeftControl"]

    if InitData then
        if InitData["WindowName"] then
            Main["Title"].Text = InitData["WindowName"]
        else
            Main["Title"].Text = "Script"
        end
        if InitData["Keybind"] then
            Keybind = Enum.KeyCode[(type(InitData["Keybind"]) == "userdata" and InitData["Keybind"].Name) or (type(InitData["Keybind"]) == "string" and InitData["Keybind"])]
        end
    end

    game:GetService("UserInputService").InputBegan:Connect(function(Input, GPE)
        if Input.KeyCode == Keybind and not GPE then
            Interface.Enabled = not Interface.Enabled
        end
    end)

    Main["Tabs"].CanvasSize = UDim2.new(0, Main["Tabs"]:FindFirstChild("UIListLayout").AbsoluteContentSize.X + 250, 0, 0)

    Main["Tabs"]:FindFirstChild("UIListLayout"):GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Main["Tabs"].CanvasSize = UDim2.new(0, Main["Tabs"]:FindFirstChild("UIListLayout").AbsoluteContentSize.X + 250, 0, 0)
    end)
    
    local Mode = false
    
    Main["Mode"].MouseButton1Click:Connect(function()
        Mode = not Mode
    	
    	function MainInverse(CV)
        	return Color3.new(
        		(1 - CV.R) + 0.1,
        		(1 - CV.G) + 0.1,
        		(1 - CV.B) + 0.1
        	)
        end
        
        function SecondaryInverse(CV)
        	return Color3.new(
        		1 - CV.R,
        		1 - CV.G,
        		1 - CV.B
        	)
        end
    
    	Main.BackgroundColor3 = MainInverse(Main.BackgroundColor3)
    
    	for _, Object in ipairs(Main:GetDescendants()) do
    		if Object:IsA("Frame") then
    			Object.BackgroundColor3 = MainInverse(Object.BackgroundColor3)
    		end
    		if Object:IsA("ScrollingFrame") then
    			Object.ScrollBarImageColor3 = SecondaryInverse(Object.ScrollBarImageColor3)
    		end
    		if (Object:IsA("TextButton") or Object:IsA("TextLabel")) and Object.Name ~= "ToggleButton" then
    			Object.BackgroundColor3 = MainInverse(Object.BackgroundColor3)
    			Object.TextColor3 = SecondaryInverse(Object.TextColor3)
    		end
    		if Object:IsA("ImageButton") or Object:IsA("ImageLabel") then
    			Object.BackgroundColor3 = MainInverse(Object.BackgroundColor3)
    			Object.ImageColor3 = SecondaryInverse(Object.ImageColor3)
    		end
    		if Object:IsA("UIStroke") then
    			Object.Color = MainInverse(Object.Color)
    		end
    	end
    
    	if Mode then
    		Main["Mode"].Image = "rbxthumb://id=6031471479&type=Asset&w=420&h=420"
    	end
    	if not Mode then
    		Main["Mode"].Image = "rbxthumb://id=6031471483&type=Asset&w=420&h=420"
    	end
    end)

    local Position = Main["Close"].Position
    Main["Close"].Position = UDim2.new(Position.X.Scale, Position.X.Offset - 2, Position.Y.Scale, Position.Y.Offset)

    Main["Close"].MouseButton1Click:Connect(function()
        Interface:Destroy()
        UI:Destroy()
    end)

    function IF:Tab(Name)
        local TF = {}

        local Tab = UI["Tab"]:Clone()
        Tab.Parent = Main["Tabs"]
        Tab.Name = Name
        Tab.Text = Name
        
        IF["TabCount"] += 1

        local Container = UI["Container"]:Clone()
        Container.Parent = Main["Containers"]
        Container.Visible = (IF["TabCount"] <= 1)
        
        Tab.MouseButton1Click:Connect(function()
            for _, Frame in ipairs(Main["Containers"]:GetChildren()) do
                Frame.Visible = false
            end
            Container.Visible = true
        end)

        local LS = Container["LeftSide"]
        local RS = Container["RightSide"]

        function GetSide()
            if LS:FindFirstChild("UIListLayout").AbsoluteContentSize.Y <= RS:FindFirstChild("UIListLayout").AbsoluteContentSize.Y then
                return LS
            else
                return RS
            end
        end

        function TF:Section(Name)
            local SF = {}
            
            local Section = UI["Section"]:Clone()
            Section.Parent = GetSide()

            Section.Size = UDim2.new(0.99, 0, 0, Section:FindFirstChild("UIListLayout").AbsoluteContentSize.Y + Section:FindFirstChild("UIListLayout").Padding.Offset)

            Section:FindFirstChild("UIListLayout"):GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                Section.Size = UDim2.new(0.99, 0, 0, Section:FindFirstChild("UIListLayout").AbsoluteContentSize.Y + Section:FindFirstChild("UIListLayout").Padding.Offset)
            end)
            
            Section["SectionTitle"]["SectionTitleText"]:GetPropertyChangedSignal("Text"):Connect(function()
                Section["SectionTitle"]["SectionTitleText"].Size = UDim2.new(Section["SectionTitle"]["SectionTitleText"].Size.X.Scale, Section["SectionTitle"]["SectionTitleText"].TextBounds.X + 4, Section["SectionTitle"]["SectionTitleText"].Size.Y.Scale, Section["SectionTitle"]["SectionTitleText"].Size.Y.Offset)
            end)
            
            Section["SectionTitle"]["SectionTitleText"].Text = Name

            local TooltipEnabled = false

            function Tooltip(Text)
                if not Text then
                    Text = ""
                end

                local Info = Main["Info"]

                local InfoFrame = Info["InfoFrame"]
                local Shadow = Info["Shadow"]
                local InfoText = InfoFrame["InfoText"]
                local UISTR = InfoFrame["UIStroke"]

                local function Tween(Object, TweenInfo, Properties)
                    return game:GetService("TweenService"):Create(Object, TweenInfo, Properties):Play()
                end

                local TweenInfoA = TweenInfo.new(0.2, Enum.EasingStyle["Quint"], Enum.EasingDirection["Out"])
                local TweenInfoB = TweenInfo.new(0.2)

                local IFSX = InfoFrame.Size.X
                local IFSY = InfoFrame.Size.Y

                if TooltipEnabled then
                    Tween(InfoFrame, TweenInfoA, {Size = UDim2.new(0, IFSX.Offset, 0, IFSY.Offset)})
                    Tween(Shadow, TweenInfoB, {ImageTransparency = 0.7})
                    Tween(InfoText, TweenInfoB, {TextTransparency = 0})
                    Tween(UISTR, TweenInfoB, {Transparency = 0})
                    
                    InfoText.Text = Text
                else
                    Tween(InfoFrame, TweenInfoA, {Size = UDim2.new(-0.05, IFSX.Offset, -0.02, IFSY.Offset)})
                    Tween(Shadow, TweenInfoB, {ImageTransparency = 1})
                    Tween(InfoText, TweenInfoB, {TextTransparency = 1})
                    Tween(UISTR, TweenInfoB, {Transparency = 1})
                    
                    InfoText.Text = ""
                end
            end
            
            function SF:Label(Text)
                local LBF = {}

                local Label = UI["Paragraph"]:Clone()
                Label.Parent = Section

                Label["ParagraphText"].TextWrapped = true
                Label["ParagraphText"].TextYAlignment = Enum.TextYAlignment.Center

                Label["ParagraphText"]:GetPropertyChangedSignal("Text"):Connect(function()
                    local X = Label.Size.X
                    local Y = Label.Size.Y

                    Label.Size = UDim2.new(X.Scale, X.Offset, Y.Scale, math.max(25, Label["ParagraphText"].TextBounds.Y + 14))
                    Label["ParagraphText"].Size  = UDim2.new(X.Scale, X.Offset, Y.Scale, math.max(25, Label["ParagraphText"].TextBounds.Y + 20))
                end)

                Label["ParagraphText"].Text = Text

                function LBF:Set(Text)
                    Label["ParagraphText"].Text = Text
                end

                function LBF:Tooltip(Text)
                    Label.MouseEnter:Connect(function()
                        TooltipEnabled = true
                        Tooltip(Text)
                    end)

                    Label.MouseLeave:Connect(function()
                        TooltipEnabled = false
                        Tooltip(Text)
                    end)
                end

                return LBF
            end
            
            function SF:Button(Name, Callback)
                local BF = {}

                local Button = UI["Button"]:Clone()
                Button.Parent = Section
                Button.Name = Name
                Button.Text = Name
                
                Button.MouseButton1Click:Connect(function()
                    Callback()
                end)

                function BF:Tooltip(Text)
                    Button.MouseEnter:Connect(function()
                        TooltipEnabled = true
                        Tooltip(Text)
                    end)

                    Button.MouseLeave:Connect(function()
                        TooltipEnabled = false
                        Tooltip(Text)
                    end)
                end

                return BF
            end

            function SF:Box(Name, PlaceholderText, Callback)
                local BXF = {}

                local Box = UI["Box"]:Clone()
                Box.Parent = Section
                Box.Name = Name
                Box["BoxText"].Text = Name
                Box["BoxInput"].PlaceholderText = PlaceholderText

                Box["BoxInput"].InputEnded:Connect(function(EP)
                    if EP then
                        pcall(Callback, Box["BoxInput"].Text)
                        Box["BoxInput"].Text = ""
                    end
                end)

                function BXF:Tooltip(Text)
                    Box.MouseEnter:Connect(function()
                        TooltipEnabled = true
                        Tooltip(Text)
                    end)

                    Box.MouseLeave:Connect(function()
                        TooltipEnabled = false
                        Tooltip(Text)
                    end)
                end

                return BXF
            end

            function SF:Toggle(Name, Callback, Options)
                local TGF = {}

                local Enabled = false

                if Options then
                    if Options.Enabled then
                        Enabled = Options.Enabled
                    end
                end

                local Toggle = UI["Toggle"]:Clone()
                Toggle.Parent = Section
                Toggle.Name = Name
                Toggle["ToggleText"].Text = Name

                function ToggleColor(Value)
                    if Value then
                        game:GetService("TweenService"):Create(Toggle["ToggleButton"], TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(180, 255, 180)}):Play()
                    else
                        game:GetService("TweenService"):Create(Toggle["ToggleButton"], TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 180, 180)}):Play()
                    end
                end

                ToggleColor(Enabled)

                Toggle["ToggleButton"].MouseButton1Click:Connect(function()
                    Enabled = not Enabled
                    ToggleColor(Enabled)
                    Callback(Enabled)
                end)

                function TGF:Get()
                    return Enabled
                end

                function TGF:Set(Value)
                    Enabled = Value
                    ToggleColor(Enabled)
                    Callback(Enabled)
                end

                function TGF:Tooltip(Text)
                    Toggle.MouseEnter:Connect(function()
                        TooltipEnabled = true
                        Tooltip(Text)
                    end)

                    Toggle.MouseLeave:Connect(function()
                        TooltipEnabled = false
                        Tooltip(Text)
                    end)
                end

                return TGF
            end

            function SF:Slider(Name, Callback, Options)
                local SLF = {}

                local Default, Min, Max, Precise = 0, 0, 1, false

                if Options.Default then
                    Default = Options.Default
                end
                if Options.Min or Options.Minimum then
                    Min = ((Options.Min ~= nil and Options.Min) or (Options.Minimum ~= nil and Options.Minimum))
                end
                if Options.Max or Options.Maximum then
                    Max = ((Options.Max ~= nil and Options.Max) or (Options.Maximum ~= nil and Options.Maximum))
                end
                if Options.Precise then
                    Precise = Options.Precise
                end

                local Slider = UI["Slider"]:Clone()
                Slider.Parent = Section
                Slider.Name = Name
                Slider["SliderText"].Text = Name

                local Enabled = false

                Slider["SliderMain"]["SliderInput"].MouseButton1Down:Connect(function()
                    Enabled = true
                end)

                Slider["SliderMain"]["SliderFrame"].Size = UDim2.new(math.clamp((Default - Min) / (Max - Min), 0, 1), 0, 1, 0)
                
                if Precise then
                    Slider["ValueText"].Text = string.format("%.03f", Default)
                else
                    Slider["ValueText"].Text = Default
                end
                
                game:GetService("UserInputService").InputEnded:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Enabled = false
                    end
                end)

                local ReturnValue = 0

                coroutine.wrap(function()
                    game:GetService("RunService").RenderStepped:Connect(function()
                        local Mouse = game:GetService("Players").LocalPlayer:GetMouse()

                        if Enabled then
                            local Percentage = math.clamp((Mouse.X - Slider["SliderMain"].AbsolutePosition.X) / Slider["SliderMain"].AbsoluteSize.X, 0, 1)
                            local Value = ((Max - Min) * Percentage) + Min

                            ReturnValue = Value

                            game:GetService("TweenService"):Create(Slider["SliderMain"]["SliderFrame"], TweenInfo.new(0.2, Enum.EasingStyle["Quint"], Enum.EasingDirection["Out"]), {Size = UDim2.new(Percentage, 0, 1, 0)}):Play()

                            if Precise then
                                Slider["ValueText"].Text = string.format("%.03f", Value)
                                pcall(Callback, Value)
                            else
                                Slider["ValueText"].Text = math.round(Value)
                                pcall(Callback, math.round(Value))
                            end
                        end
                    end)
                end)()

                function SLF:Get()
                    return ReturnValue
                end

                function SLF:Set(Value)
                    local Percentage = math.clamp((Slider["SliderMain"].AbsolutePosition.X / Slider["SliderMain"].AbsoluteSize.X) * Value, 0, 1)
                    local Value = ((Max - Min) * Percentage) + Min

                    game:GetService("TweenService"):Create(Slider["SliderMain"]["SliderFrame"], TweenInfo.new(0.2, Enum.EasingStyle["Quint"], Enum.EasingDirection["Out"]), {Size = UDim2.new(Percentage, 0, 1, 0)}):Play()

                    if Precise then
                        Slider["ValueText"].Text = string.format("%.03f", Value)
                        pcall(Callback, Value)
                    else
                        Slider["ValueText"].Text = math.round(Value)
                        pcall(Callback, math.round(Value))
                    end
                end

                function SLF:Tooltip(Text)
                    Slider.MouseEnter:Connect(function()
                        TooltipEnabled = true
                        Tooltip(Text)
                    end)

                    Slider.MouseLeave:Connect(function()
                        TooltipEnabled = false
                        Tooltip(Text)
                    end)
                end

                return SLF
            end

            function SF:Dropdown(Name, Data, Callback)
                local DDF = {}

                local CurrentData = {}
                local CurrentValue = nil
                local Enabled = false

                local Dropdown = UI["Dropdown"]:Clone()
                Dropdown.Parent = Section
                Dropdown.Name = Name
                Dropdown["DropdownText"].Text = Name

                Dropdown["DropdownInteractable"].MouseButton1Click:Connect(function()
                    Enabled = not Enabled
                    
                    local DDX = Dropdown.Size.X
                    local DDY = Dropdown.Size.Y

                    if Enabled then
                        game:GetService("TweenService"):Create(Dropdown, TweenInfo.new(0.2, Enum.EasingStyle["Quint"], Enum.EasingDirection["Out"]), {Size = UDim2.new(DDX.Scale, DDX.Offset, 0, 92)}):Play()
                    end
                    if not Enabled then
                        game:GetService("TweenService"):Create(Dropdown, TweenInfo.new(0.2, Enum.EasingStyle["Quint"], Enum.EasingDirection["Out"]), {Size = UDim2.new(DDX.Scale, DDX.Offset, 0, 24)}):Play()
                    end
                end)

                local function Setup(Data)
                    for _, Value in next, Data do
                        local Button = Instance.new("TextButton", Dropdown["DropdownContainer"])
                        Button.BackgroundTransparency = 1
                        Button.BorderSizePixel = 0
                        Button.Font = Enum.Font["Gotham"]
                        Button.Name = "DropdownOption"
                        Button.Size = UDim2.new(1, 0, 0, 20)
                        Button.TextColor3 = Color3.fromRGB(0, 0, 0)
                        Button.TextSize = 8

                        if type(Value) == "userdata" then
                            Button.Text = Value.Name
                        else
                            Button.Text = tostring(Value)
                        end

                        Button.MouseButton1Click:Connect(function()
                            pcall(Callback, Value)
                        end)
                    end
                end

                local function Clear()
                    for _, Button in ipairs(Dropdown["DropdownContainer"]:GetChildren()) do
                        if Button:IsA("TextButton") and Button.Name == "DropdownOption" then
                            Button:Destroy()
                        end
                    end
                end

                for _, DataValue in ipairs(Data) do
                    if type(DataValue) == "userdata" then
                        CurrentData[DataValue.Name] = DataValue
                    else
                        CurrentData[DataValue] = DataValue
                    end
                end

                Setup(CurrentData)

                function DDF:Get()
                    return CurrentValue
                end

                function DDF:Set(Value)
                    if table.find(CurrentData, Value) then
                        CurrentValue = Value
                        pcall(Callback, Value)
                    end
                end

                function DDF:Update(Data)
                    if type(Data) ~= "table" then
                        Data = {Data}
                    end

                    table.clear(CurrentData)

                    Clear()
                    
                    for _, DataValue in ipairs(Data) do
                        if type(DataValue) == "userdata" then
                            CurrentData[DataValue.Name] = DataValue
                        else
                            CurrentData[DataValue] = DataValue
                        end
                    end
    
                    Setup(CurrentData)
                end

                function DDF:Tooltip(Text)
                    Dropdown.MouseEnter:Connect(function()
                        TooltipEnabled = true
                        Tooltip(Text)
                    end)

                    Dropdown.MouseLeave:Connect(function()
                        TooltipEnabled = false
                        Tooltip(Text)
                    end)
                end

                return DDF
            end
            
            return SF
        end
        
        return TF
    end
    
    return IF
end

local ui = Library:Init({
    WindowName = "Azurium Hub",
    Keybind = Enum.KeyCode["LeftControl"] -- either the name of the keybind (string) or the keybind itself (KeyCode) works, default is "LeftControl"
})

local autofarmTab = ui:Tab("Autofarm")
local autofarmSelection = autofarmTab:Section("Farming")

local Zones = workspace:WaitForChild("FlowerZones")
local Collectibles = workspace:WaitForChild("Collectibles")

local RunService = game:GetService("RunService")
local PathFinding = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local Teleport_Quene = {}
local AutoFarm_Enabled = false
local SelectedField = nil
local AutoFarmStatus = "AbilityCollecting"
local player = Players.LocalPlayer
local SelectedField = nil

local CoreStats = player:WaitForChild("CoreStats")
local Pollen = CoreStats:WaitForChild("Pollen")
local Capacity = CoreStats:WaitForChild("Capacity")
local SpawnPos = player:WaitForChild("SpawnPos")

local Controls = player.PlayerScripts.ControlScript

local function LerpModel(Object, GoalPosition, Time)
    local timepassed = 0
	local start = Object.PrimaryPart.CFrame

	if Object:FindFirstChild("HumanoidRootPart") then
		Object.HumanoidRootPart.CanCollide = false
		Object.HumanoidRootPart.Anchored = true
	else
		return
	end
	
	while timepassed <= Time do
		local pos = Object.PrimaryPart.Position
		local goalPos = Vector3.new(GoalPosition.X, Object.PrimaryPart.Position.Y, GoalPosition.Z)

		local distance = (pos-goalPos).Magnitude

		if distance <= 2.25 then break end

        if timepassed >= Time and distance > 2.25 then
            Object:PivotTo(GoalPosition)

			break
		end

		timepassed += RunService.Heartbeat:Wait()

		Object:PivotTo(Object.HumanoidRootPart.CFrame:Lerp(GoalPosition, timepassed/Time))
	end
	
	if Object:FindFirstChild("HumanoidRootPart") then
		Object.HumanoidRootPart.CanCollide = true
		Object.HumanoidRootPart.Anchored = false
	end
end
local player = game:GetService("Players").LocalPlayer
local dropdown = autofarmSelection:Dropdown("Fields", Zones:GetChildren(), function(field)
    if player then
    local character = player.Character or player.CharacterAdded:Wait()
    local distance = (character.PrimaryPart.Position-field.Position).Magnitude
    SelectedField = field
    LerpModel(character, field.CFrame + Vector3.new(0,3,0), distance/2.5)
   end
end)

local AutoDig = autofarmSelection:Toggle("Autodig", function(enabled)
    
end)

local AutoFarmButton = autofarmSelection:Toggle("Autofarm", function(enabled)
    Controls.Disabled =enabled
    AutoFarm_Enabled = enabled
end)
local wasEnabled = nil

Pollen.Changed:Connect(function()
  
    if Pollen.Value == 0 and wasEnabled and SelectedField then
        local character = player.Character or player.CharacterAdded:Wait()
        local distance = (character.PrimaryPart.Position-Vector3.new(SpawnPos.Value.X, SpawnPos.Value.Y, SpawnPos.Value.Z)).Magnitude
        distance = (character.PrimaryPart.Position-SelectedField.Position).Magnitude
        LerpModel(character,  SelectedField.CFrame, distance/2.5)
        AutoFarm_Enabled = wasEnabled
        wasEnabled = nil
    end
    if Pollen.Value >= Capacity.Value and wasEnabled == nil then
        
        wasEnabled = AutoFarm_Enabled
        if AutoFarm_Enabled == true then
            local character = player.Character or player.CharacterAdded:Wait()
            local distance = (character.PrimaryPart.Position-Vector3.new(SpawnPos.Value.X, SpawnPos.Value.Y, SpawnPos.Value.Z)).Magnitude

            AutoFarm_Enabled = false
            LerpModel(character, SpawnPos.Value, distance/2.5)
            task.wait(5)
            ReplicatedStorage.Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
        end
    end
end)


local function getClosestToken()
    local BestDistance = 15
    local bestToken = nil
    for i, token in pairs(Collectibles:GetChildren()) do
        local character = player.Character or player.CharacterAdded:Wait()
		local distance = (character.PrimaryPart.Position-token.Position).Magnitude
        if not BestDistance or distance < BestDistance then
            BestDistance = distance
            bestToken = token
        end
    end
    return bestToken
end

RunService.Heartbeat:Connect(function ()
    local target_token = getClosestToken()
    local character = player.Character or player.CharacterAdded:Wait()

    if target_token and character and character.PrimaryPart and AutoFarm_Enabled and AutoFarmStatus == "AbilityCollecting" then                
        local distance = (character.PrimaryPart.Position-target_token.Position).Magnitude
        repeat character.Humanoid:MoveTo(target_token.Position) 
        distance= (character.PrimaryPart.Position-target_token.Position).Magnitude
        task.wait()
        until distance<0.25 or not AutoFarm_Enabled
     
     end
end)

local planterTab = ui:Tab("Planter")
local MobTab = ui:Tab("Mobs")
local QuestTab = ui:Tab("Quest")
local SettingsTab = ui:Tab("Settings")
